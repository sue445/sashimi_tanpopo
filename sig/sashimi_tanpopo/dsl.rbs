module SashimiTanpopo
  class DSL
    def perform: (
        recipe_path: String,
        target_dir: String,
        params: Hash[Symbol, String],
        dry_run: bool,
        is_colored: bool,
        is_update_local: bool,
      ) -> changed_files

    def evaluate: (
        recipe_body: String,
        recipe_path: String,
        target_dir: String,
        params: Hash[Symbol, String],
        dry_run: bool,
        is_colored: bool,
        is_update_local: bool,
      ) -> changed_files

    class EvalContext
      @__params__: Hash[Symbol, String]
      @__dry_run__: bool
      @__target_dir__: String
      @__is_update_local__: bool
      @__is_colored__: bool
      @__changed_files__: changed_files

      def initialize: (
          params: Hash[Symbol, String],
          dry_run: bool,
          is_colored: bool,
          target_dir: String,
          is_update_local: bool,
        ) -> void

      def params: () -> Hash[Symbol, String]

      def changed_files: () -> changed_files

      def dry_run?: () -> bool

      def update_file: (String pattern) { (String) -> void } -> void

      private

      def update_single_file: (String path) { (String) -> void } -> String?

      def show_diff: (String str1, String str2) -> void
    end

    class InstanceEval
      @code: String
      @target_dir: String
      @context: EvalContext

      def initialize: (
          recipe_body: String,
          recipe_path: String,
          target_dir: String,
          context: EvalContext
        ) -> void

      def call: () -> void
    end
  end
end
